// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdpdrop returns the embedded CollectionSpec for xdpdrop.
func loadXdpdrop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpdropBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpdrop: %w", err)
	}

	return spec, err
}

// loadXdpdropObjects loads xdpdrop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpdropObjects
//	*xdpdropPrograms
//	*xdpdropMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpdropObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpdrop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpdropSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpdropSpecs struct {
	xdpdropProgramSpecs
	xdpdropMapSpecs
	xdpdropVariableSpecs
}

// xdpdropProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpdropProgramSpecs struct {
	XdpDrop *ebpf.ProgramSpec `ebpf:"xdp_drop"`
}

// xdpdropMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpdropMapSpecs struct {
}

// xdpdropVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpdropVariableSpecs struct {
}

// xdpdropObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpdropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpdropObjects struct {
	xdpdropPrograms
	xdpdropMaps
	xdpdropVariables
}

func (o *xdpdropObjects) Close() error {
	return _XdpdropClose(
		&o.xdpdropPrograms,
		&o.xdpdropMaps,
	)
}

// xdpdropMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpdropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpdropMaps struct {
}

func (m *xdpdropMaps) Close() error {
	return _XdpdropClose()
}

// xdpdropVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdpdropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpdropVariables struct {
}

// xdpdropPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpdropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpdropPrograms struct {
	XdpDrop *ebpf.Program `ebpf:"xdp_drop"`
}

func (p *xdpdropPrograms) Close() error {
	return _XdpdropClose(
		p.XdpDrop,
	)
}

func _XdpdropClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpdrop_bpfel.o
var _XdpdropBytes []byte
