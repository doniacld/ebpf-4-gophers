// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadOpenfile returns the embedded CollectionSpec for openfile.
func loadOpenfile() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpenfileBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load openfile: %w", err)
	}

	return spec, err
}

// loadOpenfileObjects loads openfile and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openfileObjects
//	*openfilePrograms
//	*openfileMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenfileObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpenfile()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openfileSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openfileSpecs struct {
	openfileProgramSpecs
	openfileMapSpecs
	openfileVariableSpecs
}

// openfileProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openfileProgramSpecs struct {
	TraceOpenat *ebpf.ProgramSpec `ebpf:"trace_openat"`
}

// openfileMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openfileMapSpecs struct {
}

// openfileVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openfileVariableSpecs struct {
}

// openfileObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenfileObjects or ebpf.CollectionSpec.LoadAndAssign.
type openfileObjects struct {
	openfilePrograms
	openfileMaps
	openfileVariables
}

func (o *openfileObjects) Close() error {
	return _OpenfileClose(
		&o.openfilePrograms,
		&o.openfileMaps,
	)
}

// openfileMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenfileObjects or ebpf.CollectionSpec.LoadAndAssign.
type openfileMaps struct {
}

func (m *openfileMaps) Close() error {
	return _OpenfileClose()
}

// openfileVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadOpenfileObjects or ebpf.CollectionSpec.LoadAndAssign.
type openfileVariables struct {
}

// openfilePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenfileObjects or ebpf.CollectionSpec.LoadAndAssign.
type openfilePrograms struct {
	TraceOpenat *ebpf.Program `ebpf:"trace_openat"`
}

func (p *openfilePrograms) Close() error {
	return _OpenfileClose(
		p.TraceOpenat,
	)
}

func _OpenfileClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openfile_bpfel.o
var _OpenfileBytes []byte
