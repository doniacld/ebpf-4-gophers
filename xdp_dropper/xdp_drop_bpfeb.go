// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdp_drop returns the embedded CollectionSpec for xdp_drop.
func loadXdp_drop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_dropBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_drop: %w", err)
	}

	return spec, err
}

// loadXdp_dropObjects loads xdp_drop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_dropObjects
//	*xdp_dropPrograms
//	*xdp_dropMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_dropObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_drop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_dropSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dropSpecs struct {
	xdp_dropProgramSpecs
	xdp_dropMapSpecs
	xdp_dropVariableSpecs
}

// xdp_dropProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dropProgramSpecs struct {
	XdpDrop *ebpf.ProgramSpec `ebpf:"xdp_drop"`
}

// xdp_dropMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dropMapSpecs struct {
}

// xdp_dropVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_dropVariableSpecs struct {
}

// xdp_dropObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dropObjects struct {
	xdp_dropPrograms
	xdp_dropMaps
	xdp_dropVariables
}

func (o *xdp_dropObjects) Close() error {
	return _Xdp_dropClose(
		&o.xdp_dropPrograms,
		&o.xdp_dropMaps,
	)
}

// xdp_dropMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dropMaps struct {
}

func (m *xdp_dropMaps) Close() error {
	return _Xdp_dropClose()
}

// xdp_dropVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dropVariables struct {
}

// xdp_dropPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_dropObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_dropPrograms struct {
	XdpDrop *ebpf.Program `ebpf:"xdp_drop"`
}

func (p *xdp_dropPrograms) Close() error {
	return _Xdp_dropClose(
		p.XdpDrop,
	)
}

func _Xdp_dropClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_drop_bpfeb.o
var _Xdp_dropBytes []byte
